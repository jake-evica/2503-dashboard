version: '3'

services:
  traefik:
    image: traefik:3.0
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - "80:80"
      # Listen on port 443, default for HTTPS
      - "443:443"
    restart: always
    environment:
      - DOMAIN=${DOMAIN:-gosystemslabs.com}
      - EMAIL=${EMAIL:-jake@gosystemslab.com}
      - ENVIRONMENT=${ENVIRONMENT:-staging}
    networks:
      - traefik-public
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
      - ./traefik/users.txt:/etc/traefik/users.txt:ro
    command:
      # Enable Docker in Traefik
      - --providers.docker=true
      # Do not expose all Docker services by default
      - --providers.docker.exposedbydefault=false
      # Enable the access log
      - --accesslog=true
      # Enable the Traefik log
      - --log.level=DEBUG
      # Enable the Dashboard
      - --api.dashboard=true
      # Configure entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Configure HTTP to HTTPS redirect
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      # Configure TLS on the websecure entrypoint
      - --entrypoints.websecure.http.tls=true
      # Configure automatic SSL certificates
      - --certificatesresolvers.le.acme.email=${EMAIL}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      # Configure Docker provider
      - --providers.docker.watch=true
      - --providers.docker.network=traefik-public
      - --api=true
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      
      # Dashboard configuration
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      # HTTP routers without HTTPS redirect
      - traefik.http.routers.traefik-dashboard-http.entrypoints=web
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.${DOMAIN?Variable not set}`)
      - traefik.http.routers.traefik-dashboard-http.service=api@internal
      # HTTPS routers
      - traefik.http.routers.traefik-dashboard-https.entrypoints=websecure
      - traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.${DOMAIN?Variable not set}`)
      - traefik.http.routers.traefik-dashboard-https.tls=true
      - traefik.http.routers.traefik-dashboard-https.tls.certresolver=le
      - traefik.http.routers.traefik-dashboard-https.service=api@internal
      # admin-auth middleware with HTTP Basic auth
      - traefik.http.middlewares.admin-auth.basicauth.usersfile=/etc/traefik/users.txt
      - traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth

volumes:
  # Create a volume to store the certificates, even if the container is recreated
  traefik-public-certificates:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true
